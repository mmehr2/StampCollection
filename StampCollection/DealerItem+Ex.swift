//
//  DealerItem+Ex.swift
//  StampCollection
//
//  Created by Michael L Mehr on 5/6/15.
//  Copyright (c) 2015 Michael L. Mehr. All rights reserved.
//

import Foundation
import CoreData

/*
This class provides useful extensions to the CoreData object model classes, to allow them to remain re-generateable by XCode 6.3.
Currently it seems that these generated classes are all @NSManaged properties, and any additions will be clobbered.
*/

extension DealerItem {

    var exYearStart: Int16 {
        get {
            let (_, range) = extractYearRangeFromDescription(self.descriptionX)
            return Int16(range.start)
        }
//        set {
//            
//        }
    }
    
    var exYearEnd: Int16 {
        get {
            let (_, range) = extractYearRangeFromDescription(self.descriptionX)
            return Int16(range.end)
        }
    }
    
    enum ValueType {
        case tInt(NSNumber)
        case tString(String)
    }
 
    private static func translateKeyName( nameIn: String ) -> String {
        var name = nameIn
        // translate key name if needed (not allowed to use 1st letter as capital, not allowed to use the word "description"
        switch name {
        case "CatgDisplayNum": name = "catgDisplayNum"
        case "description": name = name + "X"
        case "catgDisplayNum": name = "CatgDisplayNum" // for export
        case "descriptionX": name = "description" // for export
        default: break //name = name.lowercaseString
        }
        return name
    }
    
    private static func typeForKeyName( name: String, withValue value: String ) -> ValueType {
        var output = ValueType.tString(value)
        // translate key name if needed (not allowed to use 1st letter as capital, not allowed to use the word "description"
        switch name {
        case "catgDisplayNum": output = ValueType.tInt(NSNumber(integer: value.toInt()!))
        case "exOrder": output = ValueType.tInt(NSNumber(integer: value.toInt()!)) // autosequencing property generated by import processor
        default: break
        }
        return output
    }
    
    private static func setDataValuesForObject( newObject: DealerItem, fromData  data: [String : String]) {
        for (key, value) in data {
            // translate key name if needed (not allowed to use 1st letter as capital, not allowed to use the word "description"
            let keyName = translateKeyName(key)
            // set the attributes of the new object (allows Int16 type or String type, for now)
            let valueType = typeForKeyName( keyName, withValue: value )
            switch valueType {
            case .tInt (let val): newObject.setValue(val, forKey: keyName)
            case .tString: newObject.setValue(value, forKey: keyName)
            }
        }
        // create fixups and extracted data properties here
//        let (_, range) = extractYearRangeFromDescription(newObject.descriptionX)
//        //if fmtFound != 0 { // no need, will set fields to 0 if fmtFound == 0
//        newObject.exYearStart = Int16(range.start)
//        newObject.exYearEnd = Int16(range.end)
    }
    
    static func makeObjectFromData( data: [String : String], withRelationships relations: [String:NSManagedObject], inContext moc: NSManagedObjectContext? = nil) -> Bool {
        // add a new object of this type to the moc
        if let moc = moc {
            let entityName = "DealerItem"
            if var newObject = NSEntityDescription.insertNewObjectForEntityForName(entityName, inManagedObjectContext: moc) as? DealerItem {
                // set the relationship back to the proper Category object
                if let mobj = relations["category"] as? Category {
                    newObject.category = mobj
                }
                // set all the other data values here, so it can use related object reference data
                DealerItem.setDataValuesForObject(newObject, fromData: data)
                return true
            } else {
                // report error creating object in CoreData MOC
                println("Unable to make CoreData DealerItem from data \(data)")
            }
        }
        return false
    }
    
    // return the names of the data properties, in import/export order (from the CSV file)
    static func getDataHeaderNames() -> [String] {
        var output : [String] = []
        //In Defined Order for CSV file:
        // id, description, status,pictid, pictype,group, cat1,cat2, price1,price2,price3,price4, buy1,buy2,buy3,buy4, oldprice1,oldprice2,oldprice3,oldprice4, CatgDisplayNum
        output.append("id")
        output.append("descriptionX")
        output.append("status")
        output.append("pictid")
        output.append("pictype")
        output.append("group")
        output.append("cat1")
        output.append("cat2")
        output.append("price1")
        output.append("price2")
        output.append("price3")
        output.append("price4")
        output.append("buy1")
        output.append("buy2")
        output.append("buy3")
        output.append("buy4")
        output.append("oldprice1")
        output.append("oldprice2")
        output.append("oldprice3")
        output.append("oldprice4")
        output.append("catgDisplayNum")
        return output
    }
    
    static func getExportHeaderNames() -> [String] {
        var output : [String] = []
        //In Defined Order for CSV file:
        // id, description, status,pictid, pictype,group, cat1,cat2, price1,price2,price3,price4, buy1,buy2,buy3,buy4, oldprice1,oldprice2,oldprice3,oldprice4, CatgDisplayNum
        output = getDataHeaderNames().map { x in
            self.translateKeyName(x) //, forExport: true)
        }
        return output
    }
    
    func makeDataFromObject() -> [String : String] {
        var output: [String : String] = [:]
        let headerNames = DealerItem.getDataHeaderNames()
        //println("DealerItem header names are \(headerNames)")
        for headerName in headerNames {
            let keyname = DealerItem.translateKeyName(headerName) //, forExport: true)
            switch headerName {
            case "group", "id", "descriptionX", "status", "pictype", "pictid"
            , "cat1", "cat2"
            , "price1", "price2", "price3", "price4"
            , "buy1", "buy2", "buy3", "buy4"
            , "oldprice1", "oldprice2", "oldprice3", "oldprice4":
                let value = valueForKey(headerName) as? String ?? ""
                output[keyname] = value
                break
            case "catgDisplayNum":
                let value = valueForKey(headerName) as? Int ?? 0
                output[keyname] = "\(value)"
                break
            default: break // ignore any auto-generated properties; we just want the basics
            }
        }
        //println("New DealerItem data is \(output)")
        return output
    }

}
