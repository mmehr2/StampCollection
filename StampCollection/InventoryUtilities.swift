//
//  InventoryUtilities.swift
//  StampCollection
//
//  Created by Michael L Mehr on 6/20/17.
//  Copyright Â© 2017 Michael L. Mehr. All rights reserved.
//

import UIKit

enum PriceType {
    case mint
    case used
    case FDC(Bool)
    case mintNoTab
    
    var ptype: String {
        switch self {
        case .mint: return "price1"
        case .used: return "price2"
        case .mintNoTab: return "price4"
        case .FDC(let has4): return has4 ? "price3" : "price2"
        }
    }
    
    var pname: String {
        switch self {
        case .mint: return "Mint"
        case .used: return "Used"
        case .mintNoTab: return "M/NT"
        case .FDC(let has4): return has4 ? "FDC" : "OnFDC"
        }
    }
}

struct PriceUsage {
    let ptype: PriceType
    let numprices: Int
    
    init(_ type: PriceType, num: Int) {
        numprices = num
        switch type {
        case .FDC:
            ptype = .FDC(num > 2)
        default:
            ptype = type
        }
    }
}

// print album ref data object (with presplit ref as generated by AlbumFamilyNavigator)
func printAlbumData(_ data: [String:String]) {
    print("Album reference: \(data)")
}

func offsetAlbumPageInData(_ data_: [String:String], by offset:Int = 1) -> [String:String] {
    var data = data_
    guard let numstr = data["albumPage"] else { return data }
    let number = numstr.components(separatedBy: ".")
    if let numint = Int(number[0]) {
        if number.count > 1 {
            data["albumPage"] = "\(numint + offset).\(number[1])"
        } else {
            data["albumPage"] = "\(numint + offset)"
        }
    }
    return data
}

func offsetAlbumPageExInData(_ data_: [String:String], by offset:Int = 1) -> [String:String] {
    var data = data_
    guard let numstr = data["albumPage"] else { return data }
    let number = numstr.components(separatedBy: ".")
    if number.count == 1 {
        // no ext page, start at .1, ignore offset
        data["albumPage"] = "\(number[0]).1"
    } else if let numint = Int(number[1]) {
        data["albumPage"] = "\(number[0]).\(numint + offset)"
    }
    return data
}

// this assumes albumIndex has been set to the numeric suffix of the albumRef string
// if it has not, it uses the numeric part of albumRef, if present
func offsetAlbumIndexInData(_ data_: [String:String], by offset:Int = 1) -> [String:String] {
    var data = data_
    var numstr = data["albumIndex"]
    if numstr == nil {
        // if albumIndex doesn't exist, check for albumRef and do the split here
        if let albumRef = data["albumRef"] {
            let (_, num) = splitNumericEndOfString(albumRef)
            numstr = num
        } else {
            // give up, no changes (silently)
            return data
        }
    }
    if let numint = Int(numstr!) {
        data["albumIndex"] = "\(numint + offset)"
    } else {
        // current number didn't exist (???), assume unnumbered first item is always 1
        data["albumIndex"] = "\(1 + offset)"
    }
    // NOTE: since we have created a new album here (continuing the same section as before), we must also increment the page number to prevent duplicate page codes
    // since it is possible that other patterns will emerge for using this function, this can be commented out, but some way of preventing duplicates must be assured
    data = offsetAlbumPageInData(data)
    return data
}

